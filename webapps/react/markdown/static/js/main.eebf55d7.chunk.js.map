{"version":3,"sources":["reducers/SetMarkdownReducer.js","reducers/index.js","actions/types.js","store.js","components/MarkDownForm.js","actions/SetMarkdownAction.js","components/MarkDownPreviewer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","markdown","combineReducers","markdownSetup","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","store","createStore","RootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","MarkDownForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","setMarkDownParse","target","value","setState","react_default","a","createElement","className","onChange","rows","Component","connect","dispatch","MarkDownPreviewer","react_marked_markdown","App","es","src_components_MarkDownForm","src_components_MarkDownPreviewer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAEMA,EAAe,CACpBC,SAAQ,0HCAMC,cAAgB,CAC9BC,cDMmC,WAAiC,IAAhCC,EAAgCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxBL,EAAcQ,EAAUH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEpE,OAAOC,EAAOC,MAEb,IEd4B,iBFe3B,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACHN,EADJ,CAECH,SAAUO,EAAOI,UAEnB,QACC,OAAOR,MGdJS,EAAa,CAACC,KAWLC,EATDC,YACbC,EALoB,GAOpBC,YACCC,IAAeC,WAAf,EAAmBP,GACnBQ,OAAOC,8BAAgCD,OAAOC,iDCR1CC,qBAEL,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAJ,IACjBE,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAa,GAAAO,KAAAH,KAAMH,KAEDpB,MAAQ,CACZH,SAAQ,+HAOTwB,EAAKM,aAAeN,EAAKM,aAAaC,KAAlBtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAe,KAXHA,4EAcLS,GACZP,KAAKH,MAAMW,iBAAiBD,EAAEE,OAAOC,OAErCV,KAAKW,SAAS,CACbrC,SAAUiC,EAAEE,OAAOC,yCAMpB,OACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,YACCE,SAAUhB,KAAKI,aACfM,MAAOV,KAAKvB,MAAMH,SAClByC,UAAU,gBACVE,KAAK,eAhCiBC,cAuCZC,cAAQ,KAAM,CAACX,iBC1CE,SAAAlC,GAAQ,OAAI,SAAA8C,GAE3CA,EAAS,CACRtC,KHL4B,iBGM5BG,QAASX,ODsCI6C,CAAkCvB,WEvC3CyB,2LAIJ,IAAI/C,EAAW0B,KAAKH,MAAMvB,SAE1B,OACCsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAACQ,EAAA,gBAAD,CAAiBZ,MAAQpC,YARG4C,cAkBjBC,cAJS,SAAA1C,GAAK,MAAK,CACjCH,SAAUG,EAAMD,cAAcF,WAGS,KAAzB6C,CAA+BE,GCD/BE,mLAXX,OACFX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUpC,MAAOA,GAChBwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,eANcR,aCGES,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eebf55d7.chunk.js","sourcesContent":["import { PARSE_MARKDOWN } from '../actions/types';\n\nconst initialState = {\n\tmarkdown: `\n # Welcome to my React Markdown Previewer!\n ## This is a sub-heading...\n ### And here's some other cool stuff:\n\t`,\n};\n\nexport const parseMarkdownReducer = (state = initialState, action) =>{\n\t\n\tswitch(action.type){\n\t\t\n\t\tcase PARSE_MARKDOWN:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmarkdown: action.payload\n\t\t\t};\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}; \n","import { combineReducers } from 'redux';\nimport { parseMarkdownReducer } from './SetMarkdownReducer';\n\nexport default combineReducers({\n\tmarkdownSetup: parseMarkdownReducer\t\n});\n","export const PARSE_MARKDOWN = 'PARSE_MARKDOWN';\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport RootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n\tRootReducer,\n\tinitialState,\n\tcompose(\n\t\tapplyMiddleware(...middleware),\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\t)\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {setMarkDownParse} from '../actions/SetMarkdownAction';\nimport './MarkDownForm.css';\n\nclass MarkDownForm extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tmarkdown: ` \n # Welcome to my React Markdown Previewer!\n ## This is a sub-heading...\n ### And here's some other cool stuff:\n\t\t\t`\t\n\t\t}\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleChange(e){\n\t\tthis.props.setMarkDownParse(e.target.value);\n\t\t\n\t\tthis.setState({\n\t\t\tmarkdown: e.target.value\t\n\t\t});\n\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"MarkDownForm\"> \n\t\t\t\t<textarea\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tvalue={this.state.markdown}\n\t\t\t\t\tclassName=\"form-textarea\" \n\t\t\t\t\trows=\"10\"></textarea>\n\n\t\t\t</div>\n\t\t);\t\n\t}\n}\n\nexport default connect(null, {setMarkDownParse})(MarkDownForm);\n","import { PARSE_MARKDOWN } from './types';\n\nexport const setMarkDownParse = markdown => dispatch => {\n\n\tdispatch({\n\t\ttype: PARSE_MARKDOWN,\n\t\tpayload: markdown\n\t});\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {  MarkdownPreview  } from 'react-marked-markdown';\nimport './MarkDownPreviewer.css';\n\nclass MarkDownPreviewer extends Component {\n\n\trender(){\n\t\t\n\t\tlet markdown = this.props.markdown; \n\n\t\treturn (\n\t\t\t<div className=\"MarkDownPreviewer\"> \n\t\t\t\t<MarkdownPreview value={ markdown }/>\t\n\t\t\t</div>\n\t\t);\t\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tmarkdown: state.markdownSetup.markdown\n});\n\nexport default connect(mapStateToProps, null)(MarkDownPreviewer);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './App.css';\n\nimport MarkDownForm from './components/MarkDownForm';\nimport MarkDownPreviewer from './components/MarkDownPreviewer';\n\nclass App extends Component {\n  render() {\n    return (\n\t\t<Provider store={store}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<MarkDownForm />\n\t\t\t\t<MarkDownPreviewer />\n\t\t\t</div>\n\t\t</Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}